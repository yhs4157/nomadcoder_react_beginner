# 7.0 To Do List part One

    - [value, ...array]는 array에 새로운 값을 추가한 것이 된다. 
    - 단순한 list item, list만 만들어봄. 

# 7.1 To Do List part Two

    - map function 설명 
        : array에 item 모두에게 map(function) function이 모두 적용된다. 
    - 문제 : render할 때 문제가 생김. 
        -> 컴포넌트의 list 랜더링할 때 key를 prop에 넣어주어야한다. 
    - array의 index를 받아와서 li에 key로 사용한다. 

# 7.2 Coin Tracker

    - 로딩 페이지를 만들려고 하는 것. 
    - API를 사용할 것. coinpaprika -> 8천개의 코인을 만들 수 있음. 
    - console.log()로 확인하면 큰 array를 확인할 수 있음. 
    - coin은 모두 id를 가지고 있기에 index를 들고 올 필요는 없음. 
    ***** 과제 : USD가 아닌 BIT로 변환하는 input과 출력기 만들기 *******

# 7.3 Moive App part One

    **** json 관련하여 정보가 필요하면 그냥 chrome에 fetch의 내역과 똑같이 치면 나온다. 
    - 이전과는 다른 형태로 Promise.then 형태가 아닌 asyn.await로 작성하려 한다. 
    - 두번 출력되는 이유 - setMovies, setLoading 두가지를 진행하였기 때문에
    - 괄호 문제로 출력이 되지 않음. ()이여야 하는걸 {}로 사용. 
    **** 강의에서는 그냥 genres의 리스트를 뽑아내지만 실제로 genres가 없는 경우가 생겨
    hasOwnProperty를 통해 테스트하고 fail 시에는 null, true 시에는 list 출력을 만든다. 
    그리고 해당 코드에서는 가시성을 위해 !를 사용했다. 

# 7.4 Movie App part two

# 7.5 React Router

    - 제목을 클릭해서 링크로 이동하기 기능 추가. 
    - react-router-dom을 다운로드함. 
        -> 목표는 무엇인지를 모르겠음. 
        -> Rounter별로 보여줄 거임. 
    - App은 라우터를 랜딩함. 
    - App의 기능은 Home으로 
    - 라우터간의 이동 <a href>를 사용할 경우 모든 페이지가 새로 시작함. 
    *** 문제점 : 출력이 이루어지지 않음. 
        -> 원인 : 이전 챕터까지는 movies.hasOwnProperty를 통하여 일을 확인했는데 prop를 사용함으로 인해 
        movies 자체가 넘어오지 않고 각각의 property가 넘어왔음. 그로 인하여 사용할 수 없게 된 것이 치명적. 

# 7.6 Parameters

    - route에서 전해주는 것을 받아 사용할 수 있음. 
        -> prop같음
    - :id라고 했지만 :tomato라고 하면 tomato: ${id}가 전달됨. 

# 7.7 Publishing 

 - 1단계 : 
    1. gh-page 다운 npm i gh-page
    2. build 압축 및 최적화
    3. package.json에 homepage: https://yhs4157.github.io/{}
        -> {}에는 git remote -v 에 결과물을 넣으면 됨. 
    
 - 2단계 : 
    1. deploy를 script에 추가 "gh-pages -d build",
    2. predeploy: "npm run build" 
    3. 즉 배포하기 전에 빌드하고 빌드한 것을 배포하는 순서로 작동하게 만듦. 
    
****** css에서 <div>하나만으로도 작동 안하는 경우가 빈번하니 한번더 확인할 필요가 있음. 
ex) grid-template-column: repeat(2, minmax(400px, 1fr));에서 앞에 <div>가 
    <div className={movies}>
        <div>
            movies.map(...); 
        </div>
    </div>
이러한 구조로 인해 받아야하는 movies에는 닿지 않고 중간에 끼인 <div>만
계속해서 나눠짐 -> 그 와중에 div 한쪽 안에 movies가 들어가 있기에 크기 영향은
다 받음. -> 더 확인하기가 어려움. 

=> 해결법 : div를 제거. 

